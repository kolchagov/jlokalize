/*
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jlokalize.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.WindowConstants;
import org.jlokalize.Main;
import org.jlokalize.SpellCheckerIntegration;
import org.tools.common.CentralStatic;
import org.tools.i18n.PropertyWithStats;

/**
 * Options dialog. Currently not many things can be set. Only using the dictionary
 * or not is supported. The effect of spell checking will be a context menu and
 * red underlines of unknown words in the main text areas.
 * 
 * @author Trilarion 2010-2011
 */
public class OptionsDlg extends JDialog {

    private static final long serialVersionUID = 1L;
    /** We need to keep track of the parent for calling special methods there */
    private EditorFrame parent;

    /** Creates new form OptionsDlg, populates with data.
     * 
     * @param parent The parent EditorFrame.
     */
    public OptionsDlg(EditorFrame parent) {
        super(parent, true);
        this.parent = parent;
        initComponents();

        // i18n of the dialog
        PropertyWithStats lang = CentralStatic.retrieve("lang-prop");
        setTitle(lang.get("options.title"));
        spellCheckBox.setText(lang.get("options.spellcheckbox"));
        closeButton.setText(lang.get("dialog.close"));

        // read from options
        if ("true".equals(Main.options.get("pref.dictionary.use"))) {
            spellCheckBox.setSelected(true);
        } else {
            spellCheckBox.setSelected(false);
        }

        if (SpellCheckerIntegration.numAvailable == 0) {
            spellCheckBox.setEnabled(false);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new JButton();
        spellCheckBox = new JCheckBox();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Options");
        setLocationByPlatform(true);
        setModal(true);
        setName("advancedDlg"); // NOI18N
        setResizable(false);

        closeButton.setText("Close");
        closeButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        spellCheckBox.setText("Enable spell checking");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(spellCheckBox))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(170, 170, 170)
                        .addComponent(closeButton)))
                .addContainerGap(171, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spellCheckBox)
                .addGap(69, 69, 69)
                .addComponent(closeButton)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 'Close' button was pressed. Read out the state of the check box and enable/
     * disable services.
     * 
     * @param evt The event.
     */
    private void closeButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        if (spellCheckBox.isSelected()) {
            Main.options.put("pref.dictionary.use", "true");
        } else {
            Main.options.put("pref.dictionary.use", "false");
        }
        parent.spellCheckRegisterUnregister();

        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton closeButton;
    private JCheckBox spellCheckBox;
    // End of variables declaration//GEN-END:variables
}
