/*
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.jlokalize.editor;

import java.awt.Frame;
import java.io.IOException;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.WindowConstants;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import org.jlokalize.Main;
import org.tools.io.Resource;
import org.tools.io.ResourceUtils;


/**
 *
 * @author Trilarion
 */
public class CountryFlagTest extends JDialog {

    private static final long serialVersionUID = 1L;
    
    private static final Logger LOG = Logger.getLogger(CountryFlagTest.class.getName());    

    /** Creates new form CountryFlagTest
     * @param parent
     * @param modal
     */
    public CountryFlagTest(Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        // set the model for the table
        flagsTable.setModel(new AbstractTableModel() {
            private static final long serialVersionUID = 1L;

            class Entry {
                public String[] names = new String[4];
            }

            private Entry[] map = null;

            final Comparator<Entry> entryComparator = new Comparator<Entry>() {
                /*
                 * We just use the first entry, the clear name.
                 */
                public int compare(Entry o1, Entry o2) {
                    return o1.names[0].compareTo(o2.names[0]);
                }
            };

            // anonymous classes do not have a constructor, but a code block like this does the same job
            {
                // load everything and store in internal list
                Locale defaultLocale = Locale.getDefault();
                Locale[] locales = Locale.getAvailableLocales();
                int n = locales.length;
                map = new Entry[n];
                for (int i = 0; i < n; i++) {
                    Locale l = locales[i];
                    map[i] = new Entry();
                    map[i].names[0] = l.getDisplayName(defaultLocale);
                    map[i].names[1] = l.getLanguage();
                    map[i].names[2] = l.getCountry();                    
                    Resource res = null;
                    try {
                        res = ResourceUtils.asResource(Main.jarPath + "JLokalize.jar/icons/flags/" + l.getCountry().toLowerCase() + ".png");
                    } catch (IOException ex) {
                        LOG.log(Level.SEVERE, null, ex);
                    }
                    if (res.exists()) {
                        map[i].names[3] = "yes";
                    } else {
                        map[i].names[3] = "no";
                    }
                }
                // sort alpabetically by clear name
                Arrays.sort(map, entryComparator);
            }

            String[] names = {"all Locales - clear names", "language code", "country code", "flag available"};
            @Override
            public String getColumnName(int column) {
                return names[column];
            }

            public int getRowCount() {
                if (map != null) {
                    return map.length;
                }
                return 0;
            }

            public int getColumnCount() {
                if (map != null) {
                    return 4;
                }
                return 0;
            }

            public Object getValueAt(int rowIndex, int columnIndex) {
                return map[rowIndex].names[columnIndex];
            }
        });

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        flagsScrollPane = new JScrollPane();
        flagsTable = new JTable();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        flagsTable.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        flagsScrollPane.setViewportView(flagsTable);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(flagsScrollPane, GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(flagsScrollPane, GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    /**
     * Just starts the dialog
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CountryFlagTest dialog = new CountryFlagTest(new JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JScrollPane flagsScrollPane;
    private JTable flagsTable;
    // End of variables declaration//GEN-END:variables

}
